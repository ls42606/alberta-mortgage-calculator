name: Deploy to Production

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run type check
      run: npm run type-check
    
    - name: Run tests
      run: npm run test
    
    - name: Build project
      run: npm run build
      env:
        VITE_APP_TITLE: ${{ vars.VITE_APP_TITLE }}
        VITE_APP_URL: ${{ vars.VITE_APP_URL }}
        VITE_GOOGLE_ANALYTICS_ID: ${{ vars.VITE_GOOGLE_ANALYTICS_ID }}

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build for production
      run: npm run build
      env:
        VITE_APP_TITLE: ${{ vars.VITE_APP_TITLE }}
        VITE_APP_URL: ${{ vars.VITE_APP_URL }}
        VITE_GOOGLE_ANALYTICS_ID: ${{ vars.VITE_GOOGLE_ANALYTICS_ID }}
        VITE_GOOGLE_TAG_MANAGER_ID: ${{ vars.VITE_GOOGLE_TAG_MANAGER_ID }}
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-args: '--prod'
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
    
    - name: Deploy to Netlify
      uses: nwtgck/actions-netlify@v2.0
      with:
        publish-dir: './dist'
        production-branch: main
        github-token: ${{ secrets.GITHUB_TOKEN }}
        deploy-message: "Deploy from GitHub Actions"
        enable-pull-request-comment: true
        enable-commit-comment: true
        overwrites-pull-request-comment: true
      env:
        NETLIFY_AUTH_TOKEN: ${{ secrets.NETLIFY_AUTH_TOKEN }}
        NETLIFY_SITE_ID: ${{ secrets.NETLIFY_SITE_ID }}
      timeout-minutes: 10
    
    - name: Update Search Console
      run: |
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.GOOGLE_SEARCH_CONSOLE_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{"siteUrl": "${{ vars.VITE_APP_URL }}"}' \
          https://www.googleapis.com/webmasters/v3/sites/${{ vars.VITE_APP_URL }}/sitemaps

  content-automation:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run Content Generation
      run: |
        node -e "
        const { ContentManagementService } = require('./dist/services/contentManagementService.js');
        const service = ContentManagementService.getInstance();
        service.automateContentWorkflow().then(() => {
          console.log('Content automation completed');
        }).catch(console.error);
        "
      env:
        CLAUDE_API_KEY: ${{ secrets.CLAUDE_API_KEY }}
        CONTENT_GENERATION_ENABLED: true
    
    - name: Commit Generated Content
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add .
        git diff --staged --quiet || git commit -m "Auto-generated content update"
        git push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  performance-monitoring:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Lighthouse CI
      uses: treosh/lighthouse-ci-action@v9
      with:
        urls: |
          ${{ vars.VITE_APP_URL }}
          ${{ vars.VITE_APP_URL }}/calculators/mortgage-payment
          ${{ vars.VITE_APP_URL }}/calculators/affordability
        uploadArtifacts: true
        temporaryPublicStorage: true
    
    - name: Web Vitals Check
      run: |
        npx web-vitals-cli ${{ vars.VITE_APP_URL }}
    
    - name: Security Scan
      uses: securecodewarrior/github-action-add-sarif@v1
      with:
        sarif-file: 'security-scan-results.sarif'
        token: ${{ secrets.GITHUB_TOKEN }}

  seo-audit:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: SEO Audit
      run: |
        npm install -g lighthouse
        lighthouse ${{ vars.VITE_APP_URL }} --only-categories=seo --output=json --output-path=./seo-audit.json
        cat ./seo-audit.json | jq '.categories.seo.score'
    
    - name: Submit Sitemap
      run: |
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.GOOGLE_SEARCH_CONSOLE_TOKEN }}" \
          "${{ vars.VITE_APP_URL }}/sitemap.xml"
    
    - name: Update Analytics
      run: |
        curl -X POST \
          -H "Authorization: Bearer ${{ secrets.GOOGLE_ANALYTICS_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d '{"url": "${{ vars.VITE_APP_URL }}", "event": "deployment"}' \
          https://www.google-analytics.com/mp/collect

  notifications:
    needs: [deploy, content-automation, performance-monitoring, seo-audit]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        channel: '#deployments'
        text: 'Alberta Mortgage Calculator deployment completed'
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
    
    - name: Email Notification
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 465
        username: ${{ secrets.SMTP_USER }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: 'Deployment Status: ${{ job.status }}'
        body: |
          Alberta Mortgage Calculator deployment has completed with status: ${{ job.status }}
          
          Build URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref }}
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: GitHub Actions <noreply@albertamortgagecalculator.ca>
      if: always()